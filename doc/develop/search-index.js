var searchIndex = {};
searchIndex["amethyst"] = {"doc":"Amethyst is a free and open source game engine written in idiomatic [Rust][rs] for building video games and interactive multimedia applications. The source code is available for download on [GitHub][gh]. See the [online book][bk] for a complete guide to using Amethyst.","items":[[3,"Application","amethyst","An Application is the root object of the game engine. It binds the OS event loop, state machines, timers and other core components in a central place.",null,null],[12,"engine","","The `engine` struct, holding world and thread pool.",0,null],[3,"ApplicationBuilder","","`ApplicationBuilder` is an interface that allows for creation of an `Application` using a custom set of configuration. This is the normal way an `Application` object is created.",null,null],[12,"world","","Used by bundles to access the world directly",1,null],[12,"events","","Allows to create `RenderSystem`",1,null],[3,"Engine","","User-facing engine handle.",null,null],[12,"delta","","Current delta time value.",2,null],[12,"pool","","Thread pool.",2,null],[12,"world","","World.",2,null],[3,"StateMachine","","A simple stack-based state machine (pushdown automaton).",null,null],[4,"Error","","Common error type.",null,null],[13,"Application","","Application error.",3,null],[13,"Config","","Asset management error. Configuration error.",3,null],[13,"System","","System error.",3,null],[4,"Trans","","Types of state transitions.",null,null],[13,"None","","Continue as normal.",4,null],[13,"Pop","","Remove the active state and resume the next state on the stack or stop if there are none.",4,null],[13,"Push","","Pause the active state and push a new state onto the stack.",4,null],[13,"Switch","","Remove the current state on the stack and insert a different one.",4,null],[13,"Quit","","Stop and remove all states and shut down the engine.",4,null],[0,"assets","","Re-exports amethyst_assets and provides formats specific to the engine.",null,null],[0,"formats","amethyst::assets","Contains formats that amethyst can load as assets.",null,null],[0,"audio","amethyst::assets::formats","Provides audio formats",null,null],[3,"WavFormat","amethyst::assets::formats::audio","Loads audio from wav files.",null,null],[3,"OggFormat","","Loads audio from Ogg Vorbis files",null,null],[3,"FlacFormat","","Loads audio from Flac files.",null,null],[11,"parse","","",5,null],[11,"parse","","",6,null],[11,"parse","","",7,null],[0,"textures","amethyst::assets::formats","Formats to load textures Provides texture formats",null,null],[4,"ImageError","amethyst::assets::formats::textures","Error.",null,null],[13,"InvalidData","","",8,null],[13,"InvalidArg","","",8,null],[13,"Unsupported","","",8,null],[13,"Internal","","",8,null],[13,"Io","","",8,null],[3,"ImageData","","ImageData provided by formats, can be interpreted as a texture.",null,null],[12,"raw","","The raw image data.",9,null],[3,"JpgFormat","","Allows loading of jpg or jpeg files.",null,null],[3,"PngFormat","","Allows loading of PNG files.",null,null],[3,"BmpFormat","","Allows loading of BMP files.",null,null],[6,"ImageFuture","","A future which will eventually have an image available.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"imagedata"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","",10,null],[11,"parse","","",11,null],[11,"parse","","",12,null],[0,"meshes","amethyst::assets::formats","Formats to load meshes",null,null],[3,"ObjFormat","amethyst::assets::formats::meshes","Allows loading from Wavefront files see: https://en.wikipedia.org/wiki/Wavefront_.obj_file",null,null],[4,"ObjError","","Error type of `ObjFormat`",null,null],[13,"Utf8","","Coundn't convert bytes to `String`",13,null],[13,"Parse","","Cound't parse obj file",13,null],[6,"VerticesFuture","","A future which will eventually have an vertices available.",null,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","",14,null],[0,"audio","amethyst","Loading and playing of audio files.",null,null],[3,"AudioContext","amethyst::audio","A context for loading audio files",null,null],[3,"Dj","","This structure provides a way to programmatically pick and play music.",null,null],[3,"Source","","A loaded audio file",null,null],[3,"DecoderError","","An error occurred while decoding the source.",null,null],[0,"play","","Provides functions used to play audio.",null,null],[5,"try_play_once","amethyst::audio::play","Play a sound once.  A volume of 1.0 is unchanged, while 0.0 is silent.",null,{"inputs":[{"name":"source"},{"name":"f32"},{"name":"output"}],"output":{"name":"result"}}],[5,"play_once","","Play a sound once.  A volume of 1.0 is unchanged, while 0.0 is silent.",null,{"inputs":[{"name":"source"},{"name":"f32"},{"name":"output"}],"output":null}],[5,"play_n_times","","Play a sound n times.  A volume of 1.0 is unchanged, while 0.0 is silent.",null,{"inputs":[{"name":"source"},{"name":"f32"},{"name":"output"},{"name":"u16"}],"output":null}],[5,"try_play_n_times","","Play a sound n times.  A volume of 1.0 is unchanged, while 0.0 is silent.",null,{"inputs":[{"name":"source"},{"name":"f32"},{"name":"output"},{"name":"u16"}],"output":{"name":"result"}}],[0,"output","amethyst::audio","Provides structures and functions used to get audio outputs.",null,null],[3,"Output","amethyst::audio::output","A speaker(s) through which audio can be played.",null,null],[3,"OutputIterator","","An iterator over outputs",null,null],[5,"default_output","","Get the default output, returns none if no outputs are available.",null,{"inputs":[],"output":{"name":"option"}}],[5,"outputs","","Get a list of outputs available to the system.",null,{"inputs":[],"output":{"name":"outputiterator"}}],[11,"name","","Gets the name of the output",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","amethyst::audio","Creates a new audio context.",17,{"inputs":[],"output":{"name":"audiocontext"}}],[11,"category","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"create_asset","","",17,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"threadpool"}],"output":{"name":"result"}}],[11,"update","","",17,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"new","","Creates a new Dj using the given audio output.",18,{"inputs":[{"name":"output"}],"output":{"name":"dj"}}],[11,"set_picker","","A Dj's picker will be called by the DjSystem whenever the Dj runs out of music to play.",18,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"clear_picker","","Clears the previously set picker.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"append","","Adds a source to the Dj's queue of music to play.",18,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"result"}}],[11,"empty","","Returns true if the Dj has no more music to play.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"volume","","Retrieves the volume of the Dj, between 0.0 and 1.0;",18,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_volume","","Sets the volume of the Dj.",18,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"play","","Resumes playback of a paused Dj.  Has no effect if this Dj was never paused.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"pause","","Pauses playback, this can be resumed with `Dj::play`",18,{"inputs":[{"name":"self"}],"output":null}],[11,"is_paused","","Returns true if the Dj is currently paused.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stop","","Empties the Dj's queue of all music.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"as_ref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"as_ref","","",19,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"description","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ecs","amethyst","`amethyst` engine built-in types for `specs`.",null,null],[0,"audio","amethyst::ecs","`amethyst` audio ecs module",null,null],[0,"components","amethyst::ecs::audio","`amethyst` audio ecs components",null,null],[3,"AudioEmitter","amethyst::ecs::audio::components","An audio source, add this component to anything that emits sound.",null,null],[3,"AudioListener","","An audio listener, add this component to the local player character.",null,null],[12,"output","","Output used by this listener to emit sounds to",21,null],[12,"left_ear","","Position of the left_ear relative to the global transform on this entity.",21,null],[12,"right_ear","","Position of the right ear relative to the global transform on this entity.",21,null],[11,"new","","Creates a new AudioEmitter component initialized to the given positions. These positions will stay synced with Transform if the Transform component is available on this entity.",22,{"inputs":[],"output":{"name":"audioemitter"}}],[11,"play","","Plays an audio source from this emitter.",22,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"result"}}],[11,"set_picker","","An emitter's picker will be called by the AudioSystem whenever the emitter runs out of sounds to play.",22,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"clear_picker","","Clears the previously set picker.",22,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"systems","amethyst::ecs::audio","`amethyst` audio ecs systems",null,null],[3,"AudioSystem","amethyst::ecs::audio::systems","Syncs 3D transform data with the audio engine to provide 3D audio.",null,null],[3,"DjSystem","","Calls a Dj's picker as soon as the Dj runs out of music to play.",null,null],[11,"new","","Produces a new AudioSystem that uses the given listener.",23,{"inputs":[],"output":{"name":"audiosystem"}}],[11,"run","","",23,null],[11,"run","","",24,null],[0,"bundle","amethyst::ecs::audio","ECS audio bundles",null,null],[3,"DjBundle","amethyst::ecs::audio::bundle","DJ bundle",null,null],[11,"new","","Create a new DJ bundle",25,{"inputs":[],"output":{"name":"self"}}],[11,"with_dep","","Set dependencies for the `DjSystem`",25,null],[11,"build","","",25,{"inputs":[{"name":"self"},{"name":"applicationbuilder"}],"output":{"name":"result"}}],[0,"input","amethyst::ecs","`amethyst` input rebinding module",null,null],[3,"Bindings","amethyst::ecs::input","Used for saving and loading input settings.",null,null],[4,"InputEvent","","Events generated by the input system",null,null],[13,"KeyPressed","","A key was pressed down, sent exactly once per key press.",26,null],[12,"key_code","amethyst::ecs::input::InputEvent","",26,null],[12,"scancode","","",26,null],[13,"KeyReleased","amethyst::ecs::input","A key was released, sent exactly once per key release.",26,null],[12,"key_code","amethyst::ecs::input::InputEvent","",26,null],[12,"scancode","","",26,null],[13,"KeyTyped","amethyst::ecs::input","A unicode character was received by the window.  Good for typing.",26,null],[13,"MouseButtonPressed","","A mouse button was pressed down, sent exactly once per press.",26,null],[13,"MouseButtonReleased","","A mouse button was released, sent exactly once per release.",26,null],[13,"ButtonPressed","","A button was pressed.",26,null],[13,"ButtonReleased","","A button was released.",26,null],[13,"MouseMoved","","The mouse pointer moved on screen",26,null],[12,"delta_x","amethyst::ecs::input::InputEvent","",26,null],[12,"delta_y","","",26,null],[13,"ActionPressed","amethyst::ecs::input","The associated action had one of its keys pressed.",26,null],[13,"ActionReleased","","The associated action had one of its keys released.",26,null],[3,"InputHandler","","This struct holds state information about input devices.",null,null],[12,"bindings","","Maps inputs to actions and axes.",27,null],[3,"InputSystem","","Input system",null,null],[0,"bundle","","ECS input bundle",null,null],[3,"InputBundle","amethyst::ecs::input::bundle","Bundle for adding the `InputHandler`.",null,null],[11,"new","","Create a new input bundle with no bindings",28,{"inputs":[],"output":{"name":"self"}}],[11,"with_bindings","","Use the provided bindings with the `InputHandler`",28,{"inputs":[{"name":"self"},{"name":"bindings"}],"output":{"name":"self"}}],[11,"with_bindings_from_file","","Load bindings from file",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"build","","",28,{"inputs":[{"name":"self"},{"name":"applicationbuilder"}],"output":{"name":"result"}}],[11,"new","amethyst::ecs::input","Create a new input system. Needs a reader id for `EventHandler<winit::Event>`.",29,{"inputs":[{"name":"readerid"}],"output":{"name":"self"}}],[11,"run","","",29,null],[0,"rendering","amethyst::ecs","`amethyst` rendering ecs module",null,null],[0,"components","amethyst::ecs::rendering","Components for the rendering processor.",null,null],[3,"LightComponent","amethyst::ecs::rendering::components","Wraps `Light` into component",null,null],[12,"0","","",30,null],[3,"MaterialComponent","","Wraps `Material` into component",null,null],[12,"0","","",31,null],[3,"MeshComponent","","Wraps `Mesh` into component",null,null],[12,"0","","",32,null],[3,"MeshFuture","","Will be `MeshComponent` result type of `MeshContext::create_asset`",null,null],[3,"MeshContext","","Context to create meshes from vertices",null,null],[3,"TextureFuture","","Will be `TextureComponent` result type of `TextureContext::create_asset`",null,null],[3,"TextureComponent","","Wraps `Texture` into component",null,null],[12,"0","","",33,null],[3,"TextureContext","","Context to create textures from images",null,null],[4,"Vertices","","One of known vertices type",null,null],[13,"PosColor","","Position and color",34,null],[13,"PosTex","","Position and texture coordinates",34,null],[13,"PosNormTex","","Position, normal and texture coordinates",34,null],[13,"PosNormTangTex","","Position, normal, tangent and texture coordinates",34,null],[4,"TextureError","","Error that can occur during texture creation",null,null],[13,"Renderer","","Error occured in renderer",35,null],[13,"UnsupportedColorFormat","","Color format unsupported",35,null],[13,"UnsupportedSize","","Texture is oversized",35,null],[12,"max","amethyst::ecs::rendering::components::TextureError","Maximum size of texture (width, height)",35,null],[12,"got","","Image size (width, height)",35,null],[11,"clone","amethyst::ecs::rendering::components","",30,{"inputs":[{"name":"self"}],"output":{"name":"lightcomponent"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"light"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"materialcomponent"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"material"}}],[11,"as_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"material"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"meshcomponent"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create new `MeshComponent` from `Mesh`",32,{"inputs":[{"name":"mesh"}],"output":{"name":"self"}}],[11,"as_ref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"mesh"}}],[11,"as_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"mesh"}}],[11,"poll","","",36,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"from","","",34,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",34,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",34,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",34,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"category","","",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"create_asset","","",37,{"inputs":[{"name":"self"},{"name":"vertices"},{"name":"threadpool"}],"output":{"name":"meshfuture"}}],[11,"cache","","",37,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"retrieve","","",37,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"option"}}],[11,"update","","",37,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"clear","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_all","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",38,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"texturecomponent"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"texture"}}],[11,"as_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"texture"}}],[11,"new","","Create new `TextureComponent` from `Texture`",33,{"inputs":[{"name":"texture"}],"output":{"name":"self"}}],[11,"category","","",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"create_asset","","",39,{"inputs":[{"name":"self"},{"name":"imagedata"},{"name":"threadpool"}],"output":{"name":"texturefuture"}}],[11,"cache","","",39,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"retrieve","","",39,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"option"}}],[11,"update","","",39,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"clear","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_all","","",39,{"inputs":[{"name":"self"}],"output":null}],[6,"MeshError","","Error that can occur during mesh creation",null,null],[0,"resources","amethyst::ecs::rendering","`amethyst` rendering ecs resources",null,null],[3,"FactoryFuture","amethyst::ecs::rendering::resources","A factory future.",null,null],[3,"Factory","","The factory abstraction, which allows to access the real factory and returns futures.",null,null],[3,"AmbientColor","","The ambient color of a scene",null,null],[12,"0","","",40,null],[3,"WindowMessages","","This specs resource with id 0 permits sending commands to the renderer internal window.",null,null],[6,"TextureFuture","","A texture which may not have been created yet.",null,null],[6,"MaterialFuture","","A material which may not have been created yet.",null,null],[6,"MeshFuture","","A mesh which may not have been created yet.",null,null],[11,"poll","","",41,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"factory"}}],[11,"new","","Creates a new factory resource.",42,{"inputs":[],"output":{"name":"self"}}],[11,"create_mesh","","Creates a mesh asynchronously.",42,{"inputs":[{"name":"self"},{"name":"meshbuilder"}],"output":{"name":"meshfuture"}}],[11,"create_texture","","Creates a texture asynchronously.",42,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"texturefuture"}}],[11,"create_material","","Creates a mesh asynchronously.",42,{"inputs":[{"name":"self"},{"name":"materialbuilder"}],"output":{"name":"materialfuture"}}],[11,"execute","","Execute a closure which takes in the real factory.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"factoryfuture"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"ambientcolor"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",40,{"inputs":[],"output":{"name":"ambientcolor"}}],[11,"as_ref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"new","","Create a new `WindowMessages`",43,{"inputs":[],"output":{"name":"self"}}],[11,"send_command","","Execute this closure on the `winit::Window` next frame.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[0,"systems","amethyst::ecs::rendering","Rendering system.",null,null],[3,"RenderSystem","amethyst::ecs::rendering::systems","Rendering system.",null,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new render system",44,{"inputs":[{"name":"p"},{"name":"renderer"}],"output":{"name":"self"}}],[11,"run","","",44,null],[0,"bundle","amethyst::ecs::rendering","ECS rendering bundle",null,null],[3,"RenderBundle","amethyst::ecs::rendering::bundle","Rendering bundle",null,null],[11,"new","","Create a new render bundle with the given pipeline",45,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"with_config","","Use the given display config for configuring window and render properties",45,{"inputs":[{"name":"self"},{"name":"displayconfig"}],"output":{"name":"self"}}],[11,"build","","",45,{"inputs":[{"name":"self"},{"name":"applicationbuilder"}],"output":{"name":"result"}}],[0,"util","amethyst::ecs","Utilities that help interact with the ecs system.",null,null],[0,"systems","amethyst::ecs::util","Util Systems",null,null],[3,"FPSCounterSystem","amethyst::ecs::util::systems","FPSCounterSystem Add this system to your game to calculate FPS  ## Examples  ~~~no_run  use ecs::util::resources::FPSCounter;  let counter = FPSCounter::new(10);  counter.push(duration_to_secs(&time.delta_time)); //time.delta_time is a Duration of the delta time of this frame  println!(\"Cur FPS: {}, Sampled: {}\",counter.frame_fps(),counter.sampled_fps());  ~~~",null,null],[11,"run","","",46,null],[0,"resources","amethyst::ecs::util","Util Resources",null,null],[3,"FPSCounter","amethyst::ecs::util::resources","The FPSCounter resource needed by the FPSCounterSystem ## Examples Add it to your resources to be able to use the FPSCounterSystem world.add_resource(FPSCounter::new(20));",null,null],[11,"new","","Creates a new FPSCounter that calculates the average fps over samplesize values.",47,{"inputs":[{"name":"usize"}],"output":{"name":"fpscounter"}}],[11,"push","","Add a new delta time value.",47,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"frame_fps","","Get the fps of the this frame.",47,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"sampled_fps","","Get the average fps over the samplesize frames.",47,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[0,"transform","amethyst::ecs","`amethyst` transform ecs module",null,null],[0,"components","amethyst::ecs::transform","Components for the transform processor.",null,null],[3,"Child","amethyst::ecs::transform::components","Component for defining a parent entity.",null,null],[3,"Init","","Initialization flag. Added to entity with a `LocalTransform` component after the first update.",null,null],[3,"InnerTransform","","Raw transform data.",null,null],[12,"translation","","Translation/position vector [x, y, z]",48,null],[12,"rotation","","Quaternion [w (scalar), x, y, z]",48,null],[12,"scale","","Scale vector [x, y, z]",48,null],[3,"LocalTransform","","Local position, rotation, and scale (from parent if it exists).",null,null],[3,"Transform","","Performs a global transformation on the entity (transform from origin).",null,null],[12,"0","","",49,null],[11,"new","","Creates a new child",50,{"inputs":[{"name":"entity"}],"output":{"name":"child"}}],[11,"parent","","Returns our parent entity.",50,{"inputs":[{"name":"self"}],"output":{"name":"entity"}}],[11,"set_parent","","Sets the given entity as our parent.",50,{"inputs":[{"name":"self"},{"name":"entity"}],"output":null}],[11,"flag","","Signals to our parent entity that its child entity has changed.",50,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_dirty","","Returns whether the parent entity has changed.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"init"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"innertransform"}}],[11,"deref_mut","","",52,{"inputs":[{"name":"self"}],"output":{"name":"innertransform"}}],[11,"flag","","Flags the current transform for re-computation.",52,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_dirty","","Returns whether or not the current transform is flagged for re-computation or \"dirty\".",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matrix","","Returns the local object matrix for the transform.",52,null],[11,"default","","",52,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",49,null],[11,"into","","",49,null],[11,"as_ref","","",49,null],[11,"borrow","","",49,null],[0,"systems","amethyst::ecs::transform","Scene graph system and types",null,null],[3,"TransformSystem","amethyst::ecs::transform::systems","Handles updating `Transform` components based on the `LocalTransform` component and parents.",null,null],[11,"default","","",53,{"inputs":[],"output":{"name":"transformsystem"}}],[11,"new","","Creates a new transform processor.",53,{"inputs":[],"output":{"name":"transformsystem"}}],[11,"run","","",53,null],[0,"bundle","amethyst::ecs::transform","ECS transform bundle",null,null],[3,"TransformBundle","amethyst::ecs::transform::bundle","Transform bundle",null,null],[11,"new","","Create a new transform bundle",54,{"inputs":[],"output":{"name":"self"}}],[11,"with_dep","","Set dependencies for the `TransformSystem`",54,null],[11,"build","","",54,{"inputs":[{"name":"self"},{"name":"applicationbuilder"}],"output":{"name":"result"}}],[8,"ECSBundle","amethyst::ecs","A bundle of ECS components, resources and systems.",null,null],[10,"build","","Build and add ECS resources, register components, add systems etc to the Application.",55,{"inputs":[{"name":"self"},{"name":"applicationbuilder"}],"output":{"name":"result"}}],[0,"event","amethyst","This module contains the `WindowEvent` type and re-exports glutin event types.",null,null],[4,"ElementState","amethyst::event","",null,null],[13,"Pressed","","",56,null],[13,"Released","","",56,null],[4,"Event","","",null,null],[13,"WindowEvent","","",57,null],[12,"window_id","amethyst::event::Event","",57,null],[12,"event","","",57,null],[13,"DeviceEvent","amethyst::event","",57,null],[12,"device_id","amethyst::event::Event","",57,null],[12,"event","","",57,null],[13,"Awakened","amethyst::event","",57,null],[3,"KeyboardInput","","",null,null],[12,"scancode","","Identifies the physical key pressed",58,null],[12,"state","","",58,null],[12,"virtual_keycode","","Identifies the semantic meaning of the key",58,null],[12,"modifiers","","Modifier keys active at the time of this input.",58,null],[4,"MouseButton","","",null,null],[13,"Left","","",59,null],[13,"Right","","",59,null],[13,"Middle","","",59,null],[13,"Other","","",59,null],[4,"VirtualKeyCode","","",null,null],[13,"Key1","","The '1' key over the letters.",60,null],[13,"Key2","","The '2' key over the letters.",60,null],[13,"Key3","","The '3' key over the letters.",60,null],[13,"Key4","","The '4' key over the letters.",60,null],[13,"Key5","","The '5' key over the letters.",60,null],[13,"Key6","","The '6' key over the letters.",60,null],[13,"Key7","","The '7' key over the letters.",60,null],[13,"Key8","","The '8' key over the letters.",60,null],[13,"Key9","","The '9' key over the letters.",60,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",60,null],[13,"A","","",60,null],[13,"B","","",60,null],[13,"C","","",60,null],[13,"D","","",60,null],[13,"E","","",60,null],[13,"F","","",60,null],[13,"G","","",60,null],[13,"H","","",60,null],[13,"I","","",60,null],[13,"J","","",60,null],[13,"K","","",60,null],[13,"L","","",60,null],[13,"M","","",60,null],[13,"N","","",60,null],[13,"O","","",60,null],[13,"P","","",60,null],[13,"Q","","",60,null],[13,"R","","",60,null],[13,"S","","",60,null],[13,"T","","",60,null],[13,"U","","",60,null],[13,"V","","",60,null],[13,"W","","",60,null],[13,"X","","",60,null],[13,"Y","","",60,null],[13,"Z","","",60,null],[13,"Escape","","The Escape key, next to F1.",60,null],[13,"F1","","",60,null],[13,"F2","","",60,null],[13,"F3","","",60,null],[13,"F4","","",60,null],[13,"F5","","",60,null],[13,"F6","","",60,null],[13,"F7","","",60,null],[13,"F8","","",60,null],[13,"F9","","",60,null],[13,"F10","","",60,null],[13,"F11","","",60,null],[13,"F12","","",60,null],[13,"F13","","",60,null],[13,"F14","","",60,null],[13,"F15","","",60,null],[13,"Snapshot","","Print Screen/SysRq.",60,null],[13,"Scroll","","Scroll Lock.",60,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",60,null],[13,"Insert","","`Insert`, next to Backspace.",60,null],[13,"Home","","",60,null],[13,"Delete","","",60,null],[13,"End","","",60,null],[13,"PageDown","","",60,null],[13,"PageUp","","",60,null],[13,"Left","","",60,null],[13,"Up","","",60,null],[13,"Right","","",60,null],[13,"Down","","",60,null],[13,"Back","","The Backspace key, right over Enter.",60,null],[13,"Return","","The Enter key.",60,null],[13,"Space","","The space bar.",60,null],[13,"Compose","","The \"Compose\" key on Linux.",60,null],[13,"Numlock","","",60,null],[13,"Numpad0","","",60,null],[13,"Numpad1","","",60,null],[13,"Numpad2","","",60,null],[13,"Numpad3","","",60,null],[13,"Numpad4","","",60,null],[13,"Numpad5","","",60,null],[13,"Numpad6","","",60,null],[13,"Numpad7","","",60,null],[13,"Numpad8","","",60,null],[13,"Numpad9","","",60,null],[13,"AbntC1","","",60,null],[13,"AbntC2","","",60,null],[13,"Add","","",60,null],[13,"Apostrophe","","",60,null],[13,"Apps","","",60,null],[13,"At","","",60,null],[13,"Ax","","",60,null],[13,"Backslash","","",60,null],[13,"Calculator","","",60,null],[13,"Capital","","",60,null],[13,"Colon","","",60,null],[13,"Comma","","",60,null],[13,"Convert","","",60,null],[13,"Decimal","","",60,null],[13,"Divide","","",60,null],[13,"Equals","","",60,null],[13,"Grave","","",60,null],[13,"Kana","","",60,null],[13,"Kanji","","",60,null],[13,"LAlt","","",60,null],[13,"LBracket","","",60,null],[13,"LControl","","",60,null],[13,"LMenu","","",60,null],[13,"LShift","","",60,null],[13,"LWin","","",60,null],[13,"Mail","","",60,null],[13,"MediaSelect","","",60,null],[13,"MediaStop","","",60,null],[13,"Minus","","",60,null],[13,"Multiply","","",60,null],[13,"Mute","","",60,null],[13,"MyComputer","","",60,null],[13,"NavigateForward","","",60,null],[13,"NavigateBackward","","",60,null],[13,"NextTrack","","",60,null],[13,"NoConvert","","",60,null],[13,"NumpadComma","","",60,null],[13,"NumpadEnter","","",60,null],[13,"NumpadEquals","","",60,null],[13,"OEM102","","",60,null],[13,"Period","","",60,null],[13,"PlayPause","","",60,null],[13,"Power","","",60,null],[13,"PrevTrack","","",60,null],[13,"RAlt","","",60,null],[13,"RBracket","","",60,null],[13,"RControl","","",60,null],[13,"RMenu","","",60,null],[13,"RShift","","",60,null],[13,"RWin","","",60,null],[13,"Semicolon","","",60,null],[13,"Slash","","",60,null],[13,"Sleep","","",60,null],[13,"Stop","","",60,null],[13,"Subtract","","",60,null],[13,"Sysrq","","",60,null],[13,"Tab","","",60,null],[13,"Underline","","",60,null],[13,"Unlabeled","","",60,null],[13,"VolumeDown","","",60,null],[13,"VolumeUp","","",60,null],[13,"Wake","","",60,null],[13,"WebBack","","",60,null],[13,"WebFavorites","","",60,null],[13,"WebForward","","",60,null],[13,"WebHome","","",60,null],[13,"WebRefresh","","",60,null],[13,"WebSearch","","",60,null],[13,"WebStop","","",60,null],[13,"Yen","","",60,null],[4,"WindowEvent","","",null,null],[13,"Resized","","The size of the window has changed.",61,null],[13,"Moved","","The position of the window has changed.",61,null],[13,"Closed","","The window has been closed.",61,null],[13,"DroppedFile","","A file has been dropped into the window.",61,null],[13,"HoveredFile","","A file is being hovered over the window.",61,null],[13,"HoveredFileCancelled","","A file was hovered, but has exited the window.",61,null],[13,"ReceivedCharacter","","The window received a unicode character.",61,null],[13,"Focused","","The window gained or lost focus.",61,null],[13,"KeyboardInput","","An event from the keyboard has been received.",61,null],[12,"device_id","amethyst::event::WindowEvent","",61,null],[12,"input","","",61,null],[13,"MouseMoved","amethyst::event","The cursor has moved on the window.",61,null],[12,"device_id","amethyst::event::WindowEvent","",61,null],[12,"position","","",61,null],[13,"MouseEntered","amethyst::event","The cursor has entered the window.",61,null],[12,"device_id","amethyst::event::WindowEvent","",61,null],[13,"MouseLeft","amethyst::event","The cursor has left the window.",61,null],[12,"device_id","amethyst::event::WindowEvent","",61,null],[13,"MouseWheel","amethyst::event","A mouse wheel movement or touchpad scroll occurred.",61,null],[12,"device_id","amethyst::event::WindowEvent","",61,null],[12,"delta","","",61,null],[12,"phase","","",61,null],[13,"MouseInput","amethyst::event","An mouse button press has been received.",61,null],[12,"device_id","amethyst::event::WindowEvent","",61,null],[12,"state","","",61,null],[12,"button","","",61,null],[13,"TouchpadPressure","amethyst::event","Touchpad pressure event.",61,null],[12,"device_id","amethyst::event::WindowEvent","",61,null],[12,"pressure","","",61,null],[12,"stage","","",61,null],[13,"AxisMotion","amethyst::event","Motion on some analog axis not otherwise handled. May overlap with mouse motion.",61,null],[12,"device_id","amethyst::event::WindowEvent","",61,null],[12,"axis","","",61,null],[12,"value","","",61,null],[13,"Refresh","amethyst::event","The window needs to be redrawn.",61,null],[13,"Suspended","","App has been suspended or resumed.",61,null],[13,"Touch","","Touch event has been received",61,null],[0,"prelude","amethyst","Contains common types that can be glob-imported (`*`) for convenience.",null,null],[8,"Config","amethyst::prelude","Trait implemented by the `config!` macro.",null,null],[10,"load","","Loads a configuration structure from a file. Defaults if the file fails in any way.",62,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[10,"load_no_fallback","","Loads a configuration structure from a file.",62,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[10,"write","","Writes a configuration structure to a file.",62,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[3,"Application","","An Application is the root object of the game engine. It binds the OS event loop, state machines, timers and other core components in a central place.",null,null],[12,"engine","","The `engine` struct, holding world and thread pool.",0,null],[3,"ApplicationBuilder","","`ApplicationBuilder` is an interface that allows for creation of an `Application` using a custom set of configuration. This is the normal way an `Application` object is created.",null,null],[12,"world","","Used by bundles to access the world directly",1,null],[12,"events","","Allows to create `RenderSystem`",1,null],[3,"Engine","","User-facing engine handle.",null,null],[12,"delta","","Current delta time value.",2,null],[12,"pool","","Thread pool.",2,null],[12,"world","","World.",2,null],[4,"Trans","","Types of state transitions.",null,null],[13,"None","","Continue as normal.",4,null],[13,"Pop","","Remove the active state and resume the next state on the stack or stop if there are none.",4,null],[13,"Push","","Pause the active state and push a new state onto the stack.",4,null],[13,"Switch","","Remove the current state on the stack and insert a different one.",4,null],[13,"Quit","","Stop and remove all states and shut down the engine.",4,null],[8,"State","","A trait which defines game states that can be used by the state machine.",null,null],[11,"on_start","","Executed when the game state begins.",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_stop","","Executed when the game state exits.",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_resume","","Executed when the application returns to this game state once again.",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",63,{"inputs":[{"name":"self"},{"name":"engine"},{"name":"event"}],"output":{"name":"trans"}}],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":{"name":"trans"}}],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":{"name":"trans"}}],[0,"timing","amethyst","Utilities for working with time.",null,null],[3,"Time","amethyst::timing","Frame timing values.",null,null],[12,"delta_time","","Time elapsed since the last frame.",64,null],[12,"fixed_step","","Rate at which `State::fixed_update` is called.",64,null],[12,"last_fixed_update","","Time at which `State::fixed_update` was last called.",64,null],[4,"Stopwatch","","A stopwatch which accurately measures elapsed time.",null,null],[13,"Waiting","","Initial state with an elapsed time value of 0 seconds.",65,null],[13,"Started","","Stopwatch has started counting the elapsed time since this `Instant` and accumuluated time from previous start/stop cycles `Duration`.",65,null],[13,"Ended","","Stopwatch has been stopped and reports the elapsed time `Duration`.",65,null],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"time"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"default","","",64,{"inputs":[],"output":{"name":"time"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"stopwatch"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"stopwatch"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"stopwatch"}],"output":{"name":"bool"}}],[11,"default","","",65,{"inputs":[],"output":{"name":"stopwatch"}}],[11,"new","","Creates a new stopwatch.",65,{"inputs":[],"output":{"name":"stopwatch"}}],[11,"elapsed","","Retrieves the elapsed time.",65,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"restart","","Stops, resets, and starts the stopwatch again.",65,{"inputs":[{"name":"self"}],"output":null}],[11,"start","","Starts, or resumes, measuring elapsed time. If the stopwatch has been started and stopped before, the new results are compounded onto the existing elapsed time value.",65,{"inputs":[{"name":"self"}],"output":null}],[11,"stop","","Stops measuring elapsed time.",65,{"inputs":[{"name":"self"}],"output":null}],[11,"reset","","Clears the current elapsed time value.",65,{"inputs":[{"name":"self"}],"output":null}],[0,"util","amethyst","Util data structures and functions for various common tasks",null,null],[0,"time","amethyst::util","Util time conversion functions",null,null],[5,"duration_to_secs","amethyst::util::time","Converts a Duration to the time in seconds.",null,{"inputs":[{"name":"duration"}],"output":{"name":"f32"}}],[5,"duration_to_nanos","","Converts a Duration to nanoseconds",null,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[0,"circular_buffer","amethyst::util","CircularBuffer",null,null],[3,"CircularBuffer","amethyst::util::circular_buffer","A CircularBuffer that drops the oldest element inserted when full.",null,null],[11,"new","","Creates a new CircularBuffer with fixed size",66,{"inputs":[{"name":"usize"}],"output":{"name":"circularbuffer"}}],[11,"push","","Add a value to the CircularBuffer Returns the popped value if the buffer is full",66,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"option"}}],[11,"queue","","Get an immutable reference to the values inside the CircularBuffer",66,{"inputs":[{"name":"self"}],"output":{"name":"vecdeque"}}],[11,"fmt","amethyst","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new Application with the given initial game state. This will create and allocate all the needed resources for the event loop of the game engine. It is a shortcut for convenience if you need more control over how the engine is configured you should be using build instead.",0,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"build","","Creates a new ApplicationBuilder with the given initial game state.",0,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"run","","Run the gameloop until the game state indicates that the game is no longer running. This is done via the `State` returning `Trans::Quit` or `Trans::Pop` on the last state in from the stack. See full documentation on this in State documentation.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new ApplicationBuilder instance that wraps the initial_state. This is the more verbose way of initializing your application if you require specific configuration details to be changed away from the default.",1,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"register","","Registers a component into the entity-component-system. This method takes no options other than the component type which is defined using a 'turbofish'. See the example for what this looks like.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"with_resource","","Adds the supplied ECS resource which can be accessed from game systems.",1,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"self"}}],[11,"with_barrier","","Inserts a barrier which assures that all systems added before the barrier are executed before the ones after this barrier.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"with","","Adds a given system to the game loop.",1,null],[11,"with_thread_local","","Add a given thread-local system to the game loop.",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"with_bundle","","Add a given ECS bundle to the game loop.",1,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"result"}}],[11,"with_store","","Register an asset store with the loader logic of the Application.",1,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":{"name":"self"}}],[11,"with_max_fps","","Sets the maximum frames per second of this game.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"register_asset","","Register a new asset type with the Application. All required components related to the storage of this asset type will be registered. Since Amethyst uses AssetFutures to allow for async content loading, Amethyst needs to have a system that translates AssetFutures into Components as they resolve. Amethyst registers a system to accomplish this.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"build","","Build an `Application` object using the `ApplicationBuilder` as configured.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"on_start","amethyst::prelude","Executed when the game state begins.",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_stop","","Executed when the game state exits.",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_resume","","Executed when the application returns to this game state once again.",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",63,{"inputs":[{"name":"self"},{"name":"engine"},{"name":"event"}],"output":{"name":"trans"}}],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":{"name":"trans"}}],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":{"name":"trans"}}],[11,"fmt","amethyst","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new state machine with the given initial state.",67,{"inputs":[{"name":"s"}],"output":{"name":"statemachine"}}],[11,"is_running","","Checks whether the state machine is running.",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"start","","Initializes the state machine.",67,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"handle_event","","Passes a single event to the active state to handle.",67,{"inputs":[{"name":"self"},{"name":"engine"},{"name":"event"}],"output":null}],[11,"fixed_update","","Updates the currently active state at a steady, fixed interval.",67,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"update","","Updates the currently active state immediately.",67,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[6,"Result","","Engine result type.",null,null],[8,"State","","A trait which defines game states that can be used by the state machine.",null,null],[11,"on_start","amethyst::prelude","Executed when the game state begins.",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_stop","","Executed when the game state exits.",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"on_resume","","Executed when the application returns to this game state once again.",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":null}],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",63,{"inputs":[{"name":"self"},{"name":"engine"},{"name":"event"}],"output":{"name":"trans"}}],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":{"name":"trans"}}],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",63,{"inputs":[{"name":"self"},{"name":"engine"}],"output":{"name":"trans"}}],[11,"fmt","amethyst::ecs::input","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"deserialize","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"inputhandler"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"bindings"}}],[11,"from","amethyst::event","",60,{"inputs":[{"name":"localvirtualkeycode"}],"output":{"name":"virtualkeycode"}}],[11,"from","","",59,{"inputs":[{"name":"localmousebutton"}],"output":{"name":"mousebutton"}}],[11,"serialize","amethyst::ecs::input","",26,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",68,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"inputevent"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bindings"}}],[11,"fmt","amethyst::assets::formats::textures","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",8,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","amethyst::event","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"hash","","",59,null],[11,"hash","","",60,null],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"windowevent"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"elementstate"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"keyboardinput"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"virtualkeycode"}}],[11,"new","amethyst::ecs::input","Creates a new empty Bindings structure",68,{"inputs":[],"output":{"name":"bindings"}}],[11,"insert_axis","","Assign an axis to an ID value",68,{"inputs":[{"name":"self"},{"name":"a"},{"name":"axis"}],"output":{"name":"option"}}],[11,"remove_axis","","Removes an axis, this will return the removed axis if successful.",68,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"option"}}],[11,"axis","","Returns a reference to an axis.",68,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"option"}}],[11,"axes","","Gets a list of all axes",68,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_action_binding","","Add a button to an action.",68,null],[11,"remove_action_binding","","Removes an action binding that was assigned previously.",68,null],[11,"action_bindings","","Returns an action's bindings.",68,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"actions","","Gets a list of all action bindings",68,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","","Creates a new input handler.",27,{"inputs":[],"output":{"name":"inputhandler"}}],[11,"send_event","","Updates the input handler with a new engine event.",27,null],[11,"keys_that_are_down","","Returns an iterator over all keys that are down.",27,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"key_is_down","","Checks if a key is down.",27,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"mouse_buttons_that_are_down","","Returns an iterator over all pressed mouse buttons",27,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"mouse_button_is_down","","Checks if a mouse button is down.",27,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"scan_codes_that_are_down","","Returns an iterator over all pressed scan codes",27,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"scan_code_is_down","","Checks if the key corresponding to a scan code is down.",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mouse_position","","Gets the current mouse position.",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"buttons_that_are_down","","Returns an iterator over all buttons that are down.",27,{"inputs":[{"name":"self"}],"output":{"name":"buttons"}}],[11,"button_is_down","","Checks if a button is down.",27,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"axis_value","","Returns the value of an axis by the string id, if the id doesn't exist this returns None.",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"action_is_down","","Returns true if any of the action keys are down.",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}]],"paths":[[3,"Application"],[3,"ApplicationBuilder"],[3,"Engine"],[4,"Error"],[4,"Trans"],[3,"WavFormat"],[3,"OggFormat"],[3,"FlacFormat"],[4,"ImageError"],[3,"ImageData"],[3,"JpgFormat"],[3,"PngFormat"],[3,"BmpFormat"],[4,"ObjError"],[3,"ObjFormat"],[3,"Output"],[3,"OutputIterator"],[3,"AudioContext"],[3,"Dj"],[3,"Source"],[3,"DecoderError"],[3,"AudioListener"],[3,"AudioEmitter"],[3,"AudioSystem"],[3,"DjSystem"],[3,"DjBundle"],[4,"InputEvent"],[3,"InputHandler"],[3,"InputBundle"],[3,"InputSystem"],[3,"LightComponent"],[3,"MaterialComponent"],[3,"MeshComponent"],[3,"TextureComponent"],[4,"Vertices"],[4,"TextureError"],[3,"MeshFuture"],[3,"MeshContext"],[3,"TextureFuture"],[3,"TextureContext"],[3,"AmbientColor"],[3,"FactoryFuture"],[3,"Factory"],[3,"WindowMessages"],[3,"RenderSystem"],[3,"RenderBundle"],[3,"FPSCounterSystem"],[3,"FPSCounter"],[3,"InnerTransform"],[3,"Transform"],[3,"Child"],[3,"Init"],[3,"LocalTransform"],[3,"TransformSystem"],[3,"TransformBundle"],[8,"ECSBundle"],[4,"ElementState"],[4,"Event"],[3,"KeyboardInput"],[4,"MouseButton"],[4,"VirtualKeyCode"],[4,"WindowEvent"],[8,"Config"],[8,"State"],[3,"Time"],[4,"Stopwatch"],[3,"CircularBuffer"],[3,"StateMachine"],[3,"Bindings"]]};
searchIndex["amethyst_assets"] = {"doc":"amethyst_assets","items":[[3,"BoxedErr","amethyst_assets","A boxed error implementing `Debug`, `Display` and `Error`.",null,null],[12,"0","","",0,null],[3,"AssetFuture","","A future for an asset",null,null],[12,"0","","",1,null],[3,"AssetSpec","","A specifier for an asset, uniquely identifying it by",null,null],[12,"exts","","The possible extensions of this asset",2,null],[12,"name","","The name of this asset.",2,null],[12,"store","","Unique identifier indicating the Storage from which the asset was loaded.",2,null],[3,"Cache","","A basic implementation for a cache. This might be useful as the `Context` of an `Asset`, so that the same asset doesn't get imported twice.",null,null],[3,"AssetError","","Error type returned when loading an asset. Includes the `AssetSpec` and the error (`LoadError`).",null,null],[12,"asset","","The specifier of the asset which failed to load",3,null],[12,"error","","The error that's been raised.",3,null],[3,"SharedAssetError","","Shared version of error",null,null],[3,"Loader","","The asset loader, holding the contexts, the default (directory) store and a reference to the `ThreadPool`.",null,null],[3,"SpawnedFuture","","Represents a future value of an asset. This future may be added to the ECS world, where the responsible system can poll it and merge it into the persistent storage once it is `Ready`.",null,null],[3,"StoreId","","A unique store id, used to identify the storage in `AssetSpec`.",null,null],[3,"AssetPtr","","An `AssetPtr` which provides `push_update`, `update` and `is_shared` methods. These can simply be called in order to implement the `Asset` trait.",null,null],[3,"SimpleAsset","","`Asset` implementation that supports hot reloading",null,null],[12,"0","","",4,null],[3,"SimpleContext","","A simple implementation of the `Context` trait.",null,null],[3,"Directory","","Directory store.",null,null],[4,"LoadError","","Combined error type which is produced when loading an asset. This error does not include information which asset failed to load. For that, please look at `AssetError`.",null,null],[13,"AssetError","","The conversion from data -> asset failed.",5,null],[13,"FormatError","","The conversion from bytes -> data failed.",5,null],[13,"StorageError","","The storage was unable to retrieve the requested data.",5,null],[4,"NoError","","An error type which cannot be instantiated. Used as a placeholder for associated error types if something cannot fail.",null,null],[5,"load_asset","","Loads an asset with a given context, format, specifier and storage right now.",null,{"inputs":[{"name":"arc"},{"name":"f"},{"name":"n"},{"name":"storeid"},{"name":"s"},{"name":"arc"}],"output":{"name":"assetfuture"}}],[11,"from_future","","Wrap another future into `AssetFuture`",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"peek","","If any clone of this future has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this future.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"poll","","",1,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"from","","",1,{"inputs":[{"name":"shared"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"assetspec"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"bool"}}],[11,"new","","Creates a new asset specifier from the given parameters.",2,null],[11,"new","","Creates a new `Cache` and initializes it with the default values.",6,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","Inserts an asset, locking the internal `RwLock` to get write access to the hash map.",6,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"t"}],"output":{"name":"option"}}],[11,"get","","Retrieves an asset, locking the internal `RwLock` to get read access to the hash map. In case this asset has been inserted previously, it will be cloned and returned. Otherwise, you'll receive `None`.",6,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"option"}}],[11,"access","","Accesses a cached asset, locking the internal `RwLock` to get read access to the hash map. In case the asset exists, `f` gets called with a reference to the cached asset and this method returns `true`.",6,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"f"}],"output":{"name":"option"}}],[11,"retain","","Deletes all cached values, except the ones `f` returned `true` for. May be used when you're about to clear unused assets (see `Asset::clear`).",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"clear_all","","Deletes all cached values after locking the `RwLock`.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loaderror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"from","","",8,{"inputs":[{"name":"sharederror"}],"output":{"name":"self"}}],[11,"spawn","","Creates a SpawnedFuture and starts processing it.",9,{"inputs":[{"name":"threadpool"},{"name":"f"}],"output":{"name":"self"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"storeid"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"storeid"}],"output":{"name":"ordering"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"storeid"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"storeid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"storeid"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"storeid"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"storeid"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"storeid"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"storeid"}],"output":{"name":"bool"}}],[11,"id","","Returns a copy of the internal id.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Creates a new asset loader, initializing the directory store with the given path.",11,{"inputs":[{"name":"p"},{"name":"arc"}],"output":{"name":"self"}}],[11,"add_store","","Adds a store which can later be loaded from by supplying the same `name` to `load_from`.",11,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"register","","Registers an asset and inserts a context into the map.",11,{"inputs":[{"name":"self"},{"name":"c"}],"output":null}],[11,"reload","","Like `load_from`, but doesn't ask the cache for the asset.",11,{"inputs":[{"name":"self"},{"name":"n"},{"name":"f"},{"name":"s"}],"output":{"name":"assetfuture"}}],[11,"load","","Loads an asset with a given format from the default (directory) store. If you want to load from a custom source instead, use `load_from`.",11,{"inputs":[{"name":"self"},{"name":"n"},{"name":"f"}],"output":{"name":"assetfuture"}}],[11,"load_from","","Loads an asset with a given id and format from a custom store. The actual work is done on a worker thread, thus this method immediately returns a future.",11,{"inputs":[{"name":"self"},{"name":"n"},{"name":"f"},{"name":"s"}],"output":{"name":"assetfuture"}}],[11,"load_data","","Loads an asset with a given id and format from a custom store. The actual work is done on a worker thread, thus this method immediately returns a future.",11,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new asset pointer.",12,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"inner","","Take the inner asset.",12,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"inner_ref","","Borrows the inner asset.",12,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"inner_mut","","Borrows the inner asset mutably.",12,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"is_shared","","Returns `true` if a clone of this `AssetPtr` exists.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push_update","","Pushes an update to the shared update container; this update can then be applied to all asset pointers by calling `update` on them.",12,{"inputs":[{"name":"self"},{"name":"assetfuture"}],"output":null}],[11,"update","","Applies a previously pushed update.",12,{"inputs":[{"name":"self"}],"output":null}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"as_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"new","","Creates a new `SimpleContext` from a category string and a closure which transforms data to assets.",13,{"inputs":[{"name":"c"},{"name":"t"}],"output":{"name":"self"}}],[11,"category","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"create_asset","","",13,null],[11,"cache","","",13,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"retrieve","","",13,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"option"}}],[11,"update","","",13,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"clear","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_all","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new directory storage.",14,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"modified","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"load","","",14,null],[8,"Asset","","One of the three core traits of this crate.",null,null],[16,"Context","","The `Context` type that can produce this asset",15,null],[8,"Context","","The context type which manages assets of one type. It is responsible for caching",null,null],[16,"Asset","","The asset type this context can produce.",16,null],[16,"Data","","The `Data` type the asset can be created from.",16,null],[16,"Error","","The error that may be returned from `create_asset`.",16,null],[16,"Result","","The result type for loading an asset. This can also be a future (or anything that implements `IntoFuture`).",16,null],[10,"category","","A small keyword for which category these assets belongs to.",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"create_asset","","Provides the conversion from the data format to the actual asset.",16,null],[11,"cache","","Notifies about an asset load. This is can be used to cache the asset. To return a cached asset, see the `retrieve` function.",16,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"retrieve","","Returns `Some` cached value if possible, otherwise `None`.",16,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"option"}}],[10,"update","","Updates an asset after it's been reloaded.",16,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"clear","","Gives a hint that several assets may have been released recently.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_all","","Request for clearing the whole cache.",16,{"inputs":[{"name":"self"}],"output":null}],[8,"Format","","A format, providing a conversion from bytes to asset data, which is then in turn accepted by `Asset::from_data`. Examples for formats are `Png`, `Obj` and `Wave`.",null,null],[18,"EXTENSIONS","","A list of the extensions (without `.`).",17,null],[16,"Data","","The data type this format is able to load.",17,null],[16,"Error","","The error that may be returned from `Format::parse`.",17,null],[16,"Result","","The result of the `parse` method. Can be anything that implements `IntoFuture`.",17,null],[10,"parse","","Reads the given bytes and produces asset data.",17,null],[8,"Store","","A trait for asset stores, which provides methods for loading",null,null],[16,"Error","","The error that may occur when calling `modified` or `load`.",18,null],[16,"Result","","The result type of `load`.",18,null],[10,"modified","","This is called to check if an asset has been modified.",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[10,"load","","Loads the bytes given a category, id and extension of the asset.",18,null],[11,"new","","Creates a new boxed error.",0,{"inputs":[{"name":"t"}],"output":{"name":"boxederr"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cache","","Notifies about an asset load. This is can be used to cache the asset. To return a cached asset, see the `retrieve` function.",16,{"inputs":[{"name":"self"},{"name":"assetspec"},{"name":"assetfuture"}],"output":null}],[11,"retrieve","","Returns `Some` cached value if possible, otherwise `None`.",16,{"inputs":[{"name":"self"},{"name":"assetspec"}],"output":{"name":"option"}}],[11,"clear","","Gives a hint that several assets may have been released recently.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_all","","Request for clearing the whole cache.",16,{"inputs":[{"name":"self"}],"output":null}],[18,"EXTENSIONS","","A list of the extensions (without `.`).",17,null]],"paths":[[3,"BoxedErr"],[3,"AssetFuture"],[3,"AssetSpec"],[3,"AssetError"],[3,"SimpleAsset"],[4,"LoadError"],[3,"Cache"],[4,"NoError"],[3,"SharedAssetError"],[3,"SpawnedFuture"],[3,"StoreId"],[3,"Loader"],[3,"AssetPtr"],[3,"SimpleContext"],[3,"Directory"],[8,"Asset"],[8,"Context"],[8,"Format"],[8,"Store"]]};
searchIndex["amethyst_config"] = {"doc":"Loads RON files into a structure for easy / statically typed usage.","items":[[4,"ConfigError","amethyst_config","Error related to anything that manages/creates configurations as well as \"workspace\"-related things.",null,null],[13,"File","","Forward to the `std::io::Error` error.",0,null],[13,"Parser","","Errors related to serde's parsing of configuration files.",0,null],[13,"Serializer","","Occurs if a value is ill-formed during serialization (like a poisoned mutex).",0,null],[13,"Extension","","Related to the path of the file.",0,null],[8,"Config","","Trait implemented by the `config!` macro.",null,null],[10,"load","","Loads a configuration structure from a file. Defaults if the file fails in any way.",1,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[10,"load_no_fallback","","Loads a configuration structure from a file.",1,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[10,"write","","Writes a configuration structure to a file.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"configerror"}}],[11,"from","","",0,{"inputs":[{"name":"deerror"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"sererror"}],"output":{"name":"self"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"ConfigError"],[8,"Config"]]};
searchIndex["amethyst_input"] = {"doc":"","items":[[3,"Axis","amethyst_input","Represents an emulated analogue axis made up of digital inputs, like W and S or A and D. Two of these could be analogous to a DPAD.",null,null],[12,"pos","","Positive button, when pressed down axis value will return 1 if `neg` is not pressed down.",0,null],[12,"neg","","Negative button, when pressed down axis value will return -1 if `pos` is not pressed down.",0,null],[3,"Bindings","","Used for saving and loading input settings.",null,null],[3,"InputHandler","","This struct holds state information about input devices.",null,null],[12,"bindings","","Maps inputs to actions and axes.",1,null],[3,"Buttons","","An iterator over buttons",null,null],[4,"Button","","A Button is any kind of digital input that the engine supports.",null,null],[13,"Key","","Virtual Keyboard keys, use this when the letter on the key matters more than the position of the key.",2,null],[13,"ScanCode","","Scan code from keyboard, use this when the position of the key matters more than letter on the key.",2,null],[13,"Mouse","","Mouse buttons",2,null],[4,"InputEvent","","Events generated by the input system",null,null],[13,"KeyPressed","","A key was pressed down, sent exactly once per key press.",3,null],[12,"key_code","amethyst_input::InputEvent","",3,null],[12,"scancode","","",3,null],[13,"KeyReleased","amethyst_input","A key was released, sent exactly once per key release.",3,null],[12,"key_code","amethyst_input::InputEvent","",3,null],[12,"scancode","","",3,null],[13,"KeyTyped","amethyst_input","A unicode character was received by the window.  Good for typing.",3,null],[13,"MouseButtonPressed","","A mouse button was pressed down, sent exactly once per press.",3,null],[13,"MouseButtonReleased","","A mouse button was released, sent exactly once per release.",3,null],[13,"ButtonPressed","","A button was pressed.",3,null],[13,"ButtonReleased","","A button was released.",3,null],[13,"MouseMoved","","The mouse pointer moved on screen",3,null],[12,"delta_x","amethyst_input::InputEvent","",3,null],[12,"delta_y","","",3,null],[13,"ActionPressed","amethyst_input","The associated action had one of its keys pressed.",3,null],[13,"ActionReleased","","The associated action had one of its keys released.",3,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"bindings"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bindings"}}],[11,"new","","Creates a new empty Bindings structure",4,{"inputs":[],"output":{"name":"self"}}],[11,"insert_axis","","Assign an axis to an ID value",4,{"inputs":[{"name":"self"},{"name":"a"},{"name":"axis"}],"output":{"name":"option"}}],[11,"remove_axis","","Removes an axis, this will return the removed axis if successful.",4,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"option"}}],[11,"axis","","Returns a reference to an axis.",4,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"option"}}],[11,"axes","","Gets a list of all axes",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_action_binding","","Add a button to an action.",4,{"inputs":[{"name":"self"},{"name":"a"},{"name":"button"}],"output":null}],[11,"remove_action_binding","","Removes an action binding that was assigned previously.",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"button"}],"output":null}],[11,"action_bindings","","Returns an action's bindings.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"actions","","Gets a list of all action bindings",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"from","","",2,{"inputs":[{"name":"virtualkeycode"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"mousebutton"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"inputhandler"}}],[11,"new","","Creates a new input handler.",1,{"inputs":[],"output":{"name":"self"}}],[11,"send_event","","Updates the input handler with a new engine event.",1,{"inputs":[{"name":"self"},{"name":"windowevent"},{"name":"eventhandler"}],"output":null}],[11,"keys_that_are_down","","Returns an iterator over all keys that are down.",1,{"inputs":[{"name":"self"}],"output":{"name":"keycodes"}}],[11,"key_is_down","","Checks if a key is down.",1,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"mouse_buttons_that_are_down","","Returns an iterator over all pressed mouse buttons",1,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttons"}}],[11,"mouse_button_is_down","","Checks if a mouse button is down.",1,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"scan_codes_that_are_down","","Returns an iterator over all pressed scan codes",1,{"inputs":[{"name":"self"}],"output":{"name":"scancodes"}}],[11,"scan_code_is_down","","Checks if the key corresponding to a scan code is down.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mouse_position","","Gets the current mouse position.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"buttons_that_are_down","","Returns an iterator over all buttons that are down.",1,{"inputs":[{"name":"self"}],"output":{"name":"buttons"}}],[11,"button_is_down","","Checks if a button is down.",1,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"axis_value","","Returns the value of an axis by the string id, if the id doesn't exist this returns None.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"action_is_down","","Returns true if any of the action keys are down.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"inputevent"}}],[6,"KeyCodes","","Iterator over keycodes",null,null],[6,"ScanCodes","","Iterator over key scan codes",null,null],[6,"MouseButtons","","Iterator over MouseButtons",null,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Axis"],[3,"InputHandler"],[4,"Button"],[4,"InputEvent"],[3,"Bindings"],[3,"Buttons"]]};
searchIndex["amethyst_renderer"] = {"doc":"A data parallel rendering engine developed by the [Amethyst][am] project. The source code is available for download on [GitHub][gh]. See the [online book][bk] for a complete guide to using Amethyst.","items":[[3,"Camera","amethyst_renderer","Camera struct.",null,null],[12,"eye","","Location of the camera in three-dimensional space.",0,null],[12,"proj","","Graphical projection of the camera.",0,null],[12,"forward","","Forward vector of the camera.",0,null],[12,"right","","Right vector of the camera.",0,null],[12,"up","","Upward elevation vector of the camera.",0,null],[3,"Rgba","","An RGBA color value.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[12,"2","","",1,null],[12,"3","","",1,null],[3,"Config","","Structure for holding the renderer configuration.",null,null],[12,"title","","Name of the application window.",2,null],[12,"fullscreen","","Enables or disables fullscreen mode.",2,null],[12,"dimensions","","Current window dimensions, measured in pixels (px).",2,null],[12,"min_dimensions","","Minimum window dimensions, measured in pixels (px).",2,null],[12,"max_dimensions","","Maximum window dimensions, measured in pixels (px).",2,null],[12,"vsync","","Enables or disables vertical synchronization.",2,null],[12,"multisampling","","Level of MSAA anti-aliasing.",2,null],[12,"visibility","","Sets the visibility of the window.",2,null],[3,"Mesh","","Represents a polygonal mesh.",null,null],[3,"MeshBuilder","","Builds new meshes.",null,null],[3,"Material","","Material struct.",null,null],[12,"albedo","","Diffuse map.",3,null],[12,"emission","","Emission map.",3,null],[12,"normal","","Normal map.",3,null],[12,"metallic","","Metallic map.",3,null],[12,"roughness","","Roughness map.",3,null],[12,"ambient_occlusion","","Ambient occlusion map.",3,null],[12,"caveat","","Caveat map.",3,null],[3,"MaterialBuilder","","Builds new materials.",null,null],[3,"PipelineBuilder","","Constructs a new pipeline with the given render targets and layers.",null,null],[3,"Target","","A render target.",null,null],[3,"Renderer","","Generic renderer.",null,null],[12,"factory","","The gfx factory used for creation of buffers.",4,null],[3,"Texture","","Handle to a GPU texture resource.",null,null],[3,"TextureBuilder","","Builds new textures.",null,null],[4,"Projection","","The projection mode of a `Camera`.",null,null],[13,"Orthographic","","An [orthographic projection][op].",5,null],[13,"Perspective","","A realistic [perspective projection][pp].",5,null],[4,"Error","","Common renderer error type.",null,null],[13,"BufferCreation","","Failed to create a buffer.",6,null],[13,"NoSuchTarget","","A render target with the given name does not exist.",6,null],[13,"PassInit","","Failed to initialize a render pass.",6,null],[13,"PipelineCreation","","Failed to create a pipeline state object (PSO).",6,null],[13,"PoolCreation","","Failed to create thread pool.",6,null],[13,"ProgramCreation","","Failed to create and link a shader program.",6,null],[13,"ResViewCreation","","Failed to create a resource view.",6,null],[13,"TargetCreation","","Failed to create a render target.",6,null],[13,"TextureCreation","","Failed to create a texture resource.",6,null],[13,"WindowDestroyed","","The window handle associated with the renderer has been destroyed.",6,null],[0,"light","","Light sources.",null,null],[3,"DirectionalLight","amethyst_renderer::light","A directional light source.",null,null],[12,"color","","Color of the light in RGBA8 format.",7,null],[12,"direction","","Direction that the light is pointing.",7,null],[3,"PointLight","","A point light source.",null,null],[12,"center","","Location of the light source in three dimensional space.",8,null],[12,"color","","Color of the light in RGBA8 format.",8,null],[12,"intensity","","Brightness of the light source, in lumens.",8,null],[12,"radius","","Maximum radius of the point light's affected area.",8,null],[12,"smoothness","","Smoothness of the light-to-dark transition from the center to the radius.",8,null],[3,"SpotLight","","A spot light source.",null,null],[12,"angle","","Opening angle of the light cone.",9,null],[12,"center","","Location of the light source in three dimensional space.",9,null],[12,"color","","Color of the light in RGBA8 format.",9,null],[12,"direction","","Direction that the light is pointing.",9,null],[12,"intensity","","Brightness of the light source, in lumens.",9,null],[12,"radius","","Maximum radius of the point light's affected area.",9,null],[12,"smoothness","","Smoothness of the light-to-dark transition from the center to the radius.",9,null],[3,"SunLight","","A realistic disk-shaped sun light source.",null,null],[12,"ang_rad","","The sun's angular radius.",10,null],[12,"color","","Color of the light in RGBA8 format.",10,null],[12,"direction","","Direction that the light is pointing.",10,null],[12,"intensity","","Brightness of the sun light, in lux.",10,null],[4,"Light","","A light source.",null,null],[13,"Area","","An area light. FIXME: Missing implementation!",11,null],[13,"Directional","","A directional light.",11,null],[13,"Point","","A point light.",11,null],[13,"Spot","","A spot light.",11,null],[13,"Sun","","A sun light.",11,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"light"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"light"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"light"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"directionallight"}}],[11,"query","","",7,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"directionallight"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"directionallight"}],"output":{"name":"bool"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"directionallight"}],"output":{"name":"self"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"pointlight"}}],[11,"query","","",8,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"pointlight"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"pointlight"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"pointlight"}],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"spotlight"}}],[11,"query","","",9,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"spotlight"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"spotlight"}],"output":{"name":"bool"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"spotlight"}],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sunlight"}}],[11,"query","","",10,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"sunlight"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"sunlight"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"sunlight"}],"output":{"name":"self"}}],[0,"pass","amethyst_renderer","Different kinds of render passes.",null,null],[3,"DrawFlat","amethyst_renderer::pass","Draw mesh without lighting `V` is `VertexFormat` `M` is `Mesh` component `N` is `Material` component `T` is transform matrix component",null,null],[3,"DrawPbm","","Draw mesh with physically based lighting `V` is `VertexFormat` `A` is ambient light resource `M` is `Mesh` component `N` is `Material` component `T` is transform matrix component `L` is `Light` component",null,null],[3,"DrawShaded","","Draw mesh with simple lighting technique `V` is `VertexFormat` `A` is ambient light resource `M` is `Mesh` component `N` is `Material` component `T` is transform matrix component `L` is `Light` component",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"drawflat"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"drawflat"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"drawflat"}],"output":{"name":"bool"}}],[11,"new","","Create instance of `DrawFlat` pass",12,{"inputs":[],"output":{"name":"self"}}],[11,"compile","","",12,{"inputs":[{"name":"self"},{"name":"neweffect"}],"output":{"name":"result"}}],[11,"apply","","",12,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"drawpbm"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"drawpbm"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"drawpbm"}],"output":{"name":"bool"}}],[11,"new","","Create instance of `DrawPbm` pass",13,{"inputs":[],"output":{"name":"self"}}],[11,"compile","","",13,{"inputs":[{"name":"self"},{"name":"neweffect"}],"output":{"name":"result"}}],[11,"apply","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"drawshaded"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"drawshaded"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"drawshaded"}],"output":{"name":"bool"}}],[11,"new","","Create instance of `DrawShaded` pass",14,{"inputs":[],"output":{"name":"self"}}],[11,"compile","","",14,{"inputs":[{"name":"self"},{"name":"neweffect"}],"output":{"name":"result"}}],[11,"apply","","",14,null],[0,"prelude","amethyst_renderer","Contains common types that can be glob-imported (`*`) for convenience.",null,null],[8,"Pod","amethyst_renderer::prelude","A trait for plain-old-data types.",null,null],[3,"Renderer","","Generic renderer.",null,null],[12,"factory","","The gfx factory used for creation of buffers.",4,null],[3,"Camera","","Camera struct.",null,null],[12,"eye","","Location of the camera in three-dimensional space.",0,null],[12,"proj","","Graphical projection of the camera.",0,null],[12,"forward","","Forward vector of the camera.",0,null],[12,"right","","Right vector of the camera.",0,null],[12,"up","","Upward elevation vector of the camera.",0,null],[3,"Mesh","","Represents a polygonal mesh.",null,null],[3,"MeshBuilder","","Builds new meshes.",null,null],[3,"Material","","Material struct.",null,null],[12,"albedo","","Diffuse map.",3,null],[12,"emission","","Emission map.",3,null],[12,"normal","","Normal map.",3,null],[12,"metallic","","Metallic map.",3,null],[12,"roughness","","Roughness map.",3,null],[12,"ambient_occlusion","","Ambient occlusion map.",3,null],[12,"caveat","","Caveat map.",3,null],[3,"MaterialBuilder","","Builds new materials.",null,null],[3,"Pipeline","","Defines how the rendering pipeline should be configured.",null,null],[3,"PipelineBuilder","","Constructs a new pipeline with the given render targets and layers.",null,null],[3,"Stage","","A stage in the rendering pipeline.",null,null],[3,"StageBuilder","","Constructs a new rendering stage.",null,null],[3,"Target","","A render target.",null,null],[3,"Texture","","Handle to a GPU texture resource.",null,null],[3,"TextureBuilder","","Builds new textures.",null,null],[4,"Projection","","The projection mode of a `Camera`.",null,null],[13,"Orthographic","","An [orthographic projection][op].",5,null],[13,"Perspective","","A realistic [perspective projection][pp].",5,null],[8,"PolyPipeline","","",null,null],[10,"apply","","Retuns `ParallelIterator` which apply data to all stages",15,null],[10,"encoders_required","","Returns number of `Encoder`s required",15,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[8,"PolyStage","","",null,null],[10,"apply","","",16,null],[10,"encoders_required","","Get number of encoders needed for this stage.",16,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[0,"pipe","amethyst_renderer","Renderer pipeline configuration.",null,null],[3,"Effect","amethyst_renderer::pipe","",null,null],[12,"pso","","",17,null],[12,"data","","",17,null],[3,"EffectBuilder","","",null,null],[3,"NewEffect","","",null,null],[3,"Stage","","A stage in the rendering pipeline.",null,null],[3,"StageBuilder","","Constructs a new rendering stage.",null,null],[3,"ColorBuffer","","Target color buffer.",null,null],[12,"as_input","","Shader resource view.",18,null],[12,"as_output","","Target view.",18,null],[3,"DepthBuffer","","Target depth-stencil buffer.",null,null],[12,"as_input","","Shader resource view.",19,null],[12,"as_output","","Target view.",19,null],[3,"Target","","A render target.",null,null],[3,"TargetBuilder","","Builds new render targets.",null,null],[3,"Pipeline","","Defines how the rendering pipeline should be configured.",null,null],[3,"PipelineBuilder","","Constructs a new pipeline with the given render targets and layers.",null,null],[4,"DepthMode","","",null,null],[13,"LessEqualTest","","",20,null],[13,"LessEqualWrite","","",20,null],[0,"pass","","Types for constructing render passes.",null,null],[3,"Supplier","amethyst_renderer::pipe::pass","Is used to pass different `Encoder` and `Effect` into closure in different threads",null,null],[3,"Apply","","",null,null],[3,"CompiledPass","","",null,null],[8,"PassApply","","",null,null],[16,"Apply","","",21,null],[8,"PassData","","",null,null],[16,"Data","","",22,null],[8,"Pass","","",null,null],[10,"compile","","",23,{"inputs":[{"name":"self"},{"name":"neweffect"}],"output":{"name":"result"}}],[10,"apply","","",23,null],[11,"drive_unindexed","","",24,null],[11,"supply","","",25,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"apply"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"compiledpass"}}],[11,"apply","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"clone","amethyst_renderer::pipe","",20,{"inputs":[{"name":"self"}],"output":{"name":"depthmode"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"depthmode"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"update_global","","",17,{"inputs":[{"name":"self"},{"name":"n"},{"name":"t"}],"output":null}],[11,"update_buffer","","FIXME: Update raw buffer without transmute, use `Result` somehow.",17,null],[11,"update_constant_buffer","","FIXME: Update raw buffer without transmute.",17,{"inputs":[{"name":"self"},{"name":"n"},{"name":"t"},{"name":"encoder"}],"output":null}],[11,"clear","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"draw","","",17,{"inputs":[{"name":"self"},{"name":"mesh"},{"name":"encoder"}],"output":null}],[11,"simple","","",27,{"inputs":[{"name":"self"},{"name":"s"},{"name":"s"}],"output":{"name":"effectbuilder"}}],[11,"geom","","",27,{"inputs":[{"name":"self"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"effectbuilder"}}],[11,"tess","","",27,{"inputs":[{"name":"self"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"effectbuilder"}}],[11,"with_raw_global","","Adds a global constant to this `Effect`.",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_raw_constant_buffer","","Adds a raw uniform constant to this `Effect`.",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"with_output","","Sets the output target of the PSO.",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"self"}}],[11,"with_texture","","Adds a texture sampler to this `Effect`.",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_raw_vertex_buffer","","Adds a vertex buffer to this `Effect`.",28,null],[11,"build","","TODO: Support render targets as inputs.",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","amethyst_renderer::prelude","",29,{"inputs":[{"name":"self"}],"output":{"name":"stage"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_target","","Builds a new `PolyStage` which outputs to the `Target` with the given name.",29,{"inputs":[{"name":"n"}],"output":{"name":"stagebuilder"}}],[11,"with_backbuffer","","Builds a new `PolyStage` which outputs straight into the backbuffer.",29,{"inputs":[],"output":{"name":"stagebuilder"}}],[11,"enable","","Enables the `PolyStage` so it will execute on every frame.",29,{"inputs":[{"name":"self"}],"output":null}],[11,"disable","","Disables the `PolyStage`, preventing it from being executed on every frame.",29,{"inputs":[{"name":"self"}],"output":null}],[11,"is_enabled","","Returns whether this `PolyStage` is enabled.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"apply","","",29,null],[11,"encoders_required","","",29,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `StageBuilder` using the given target.",30,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clear_target","","Clears the stage's target.",30,{"inputs":[{"name":"self"},{"name":"c"},{"name":"d"}],"output":{"name":"self"}}],[11,"enabled","","Sets whether the `PolyStage` is turned on by default.",30,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_pass","","Appends another `Pass` to the stage.",30,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stagebuilder"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"pipeline"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build","","Builds a new renderer pipeline.",31,{"inputs":[],"output":{"name":"pipelinebuilder"}}],[11,"targets","","Returns an immutable reference to all targets and their name strings.",31,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"apply","","",31,null],[11,"encoders_required","","",31,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"clone","amethyst_renderer","",32,{"inputs":[{"name":"self"}],"output":{"name":"pipelinebuilder"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new PipelineBuilder.",32,{"inputs":[],"output":{"name":"self"}}],[11,"with_stage","","Constructs a new stage in this pipeline.",32,{"inputs":[{"name":"self"},{"name":"stagebuilder"}],"output":{"name":"pipelinebuilder"}}],[11,"with_target","","Constructs a new render target for this pipeline.",32,{"inputs":[{"name":"self"},{"name":"targetbuilder"}],"output":{"name":"self"}}],[11,"build","","",32,{"inputs":[{"name":"self"},{"name":"factory"},{"name":"target"}],"output":{"name":"result"}}],[11,"clone","amethyst_renderer::pipe","",18,{"inputs":[{"name":"self"}],"output":{"name":"colorbuffer"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"colorbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"colorbuffer"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"depthbuffer"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"depthbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"depthbuffer"}],"output":{"name":"bool"}}],[11,"clone","amethyst_renderer","",33,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"named","","Creates a new TargetBuilder with the given name.",33,{"inputs":[{"name":"n"}],"output":{"name":"targetbuilder"}}],[11,"clear_color","","Clears all color buffers to the given value.",33,{"inputs":[{"name":"self"},{"name":"encoder"},{"name":"v"}],"output":null}],[11,"clear_depth_stencil","","Clears the depth stencil buffer to the given value.",33,{"inputs":[{"name":"self"},{"name":"encoder"},{"name":"v"}],"output":null}],[11,"size","","Returns the width and height of the render target, measured in pixels.",33,null],[11,"color_buf","","Returns the color buffer with index `i`.",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"color_bufs","","Returns an array slice of the render target's color buffers.",33,null],[11,"depth_buf","","Returns the render target's depth-stencil buffer, if it has one.",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","amethyst_renderer::pipe","",34,{"inputs":[{"name":"self"}],"output":{"name":"targetbuilder"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"targetbuilder"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"targetbuilder"}],"output":{"name":"bool"}}],[11,"new","","Creates a new TargetBuilder.",34,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_depth_buf","","Sets whether this render target should have a depth-stencil buffer.",34,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_num_color_bufs","","Sets how many color buffers the render target will have. This number must be greater than zero or else `build()` will fail.",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"with_size","","Specifies a custom target size.",34,null],[6,"Targets","","A hash map containing named render targets.",null,null],[8,"PolyStage","","",null,null],[10,"apply","","",16,null],[10,"encoders_required","","Get number of encoders needed for this stage.",16,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[8,"PipelineApply","","",null,null],[16,"Apply","","",35,null],[8,"PipelineBuild","","",null,null],[16,"Pipeline","","Resuling pipeline",36,null],[10,"build","","Build pipeline",36,{"inputs":[{"name":"self"},{"name":"factory"},{"name":"target"}],"output":{"name":"result"}}],[8,"PipelineData","","",null,null],[16,"Data","","",37,null],[8,"PolyPipeline","","",null,null],[10,"apply","","Retuns `ParallelIterator` which apply data to all stages",15,null],[10,"encoders_required","","Returns number of `Encoder`s required",15,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[0,"vertex","amethyst_renderer","Built-in vertex formats.",null,null],[3,"Separate","amethyst_renderer::vertex","Vertex format for attributes in separate buffers",null,null],[3,"PosColor","","Vertex format with position and RGBA8 color attributes.",null,null],[12,"position","","Position of the vertex in 3D space.",38,null],[12,"color","","RGBA color value of the vertex.",38,null],[3,"PosTex","","Vertex format with position and UV texture coordinate attributes.",null,null],[12,"position","","Position of the vertex in 3D space.",39,null],[12,"tex_coord","","UV texture coordinates used by the vertex.",39,null],[3,"PosNormTex","","Vertex format with position, normal, and UV texture coordinate attributes.",null,null],[12,"position","","Position of the vertex in 3D space.",40,null],[12,"normal","","Normal vector of the vertex.",40,null],[12,"tex_coord","","UV texture coordinates used by the vertex.",40,null],[3,"PosNormTangTex","","Vertex format with position, normal, and UV texture coordinate attributes.",null,null],[12,"position","","Position of the vertex in 3D space.",41,null],[12,"normal","","Normal vector of the vertex.",41,null],[12,"tangent","","Tangent vector of the vertex.",41,null],[12,"tex_coord","","UV texture coordinates used by the vertex.",41,null],[4,"Position","","Type for position attribute of vertex",null,null],[4,"Color","","Type for color attribute of vertex",null,null],[4,"TexCoord","","Type for texture coord attribute of vertex",null,null],[4,"Normal","","Type for texture coord attribute of vertex",null,null],[4,"Tangent","","Type for tangent attribute of vertex",null,null],[6,"AttributeFormat","","Format for vertex attribute",null,null],[8,"Attribute","","Trait for vertex attributes to implement",null,null],[18,"NAME","","Name of the attribute It is used to bind to the attributes in shaders",42,null],[18,"FORMAT","","Format of the attribute defines arity and type",42,null],[18,"SIZE","","Size of the attribue",42,null],[16,"Repr","","Representation of the attribute usually it is `[f32; N]`",42,null],[8,"VertexFormat","","Trait implemented by all valid vertex formats.",null,null],[18,"ATTRIBUTES","","List of all attributes formats with name and offset.",43,null],[11,"size","","Returns the size of a single vertex in bytes.",43,{"inputs":[],"output":{"name":"usize"}}],[11,"attribute","","Returns attribute of vertex by type",43,{"inputs":[],"output":{"name":"attributeformat"}}],[8,"With","","Trait implemented by all valid vertex formats for each field",null,null],[18,"FORMAT","","Individual format of the attribute for this vertex format",44,null],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"separate"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"separate"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"separate"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"poscolor"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"poscolor"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"poscolor"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"postex"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"postex"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"postex"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"posnormtex"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"posnormtex"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"posnormtex"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"posnormtangtex"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"posnormtangtex"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"posnormtangtex"}],"output":{"name":"bool"}}],[11,"clone","amethyst_renderer","",5,{"inputs":[{"name":"self"}],"output":{"name":"projection"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"projection"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"projection"}],"output":{"name":"bool"}}],[11,"orthographic","","Creates an orthographic projection with the given left, right, top, and bottom plane distances.",5,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"projection"}}],[11,"perspective","","Creates a perspective projection with the given aspect ratio and field-of-view.",5,{"inputs":[{"name":"f32"},{"name":"d"}],"output":{"name":"projection"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"camera"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"camera"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"camera"}],"output":{"name":"bool"}}],[11,"to_view_matrix","","Calculates the view matrix from the given data.",0,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"black","","Returns a solid black color value.",1,{"inputs":[],"output":{"name":"rgba"}}],[11,"blue","","Returns a solid blue color value.",1,{"inputs":[],"output":{"name":"rgba"}}],[11,"green","","Returns a solid green color value.",1,{"inputs":[],"output":{"name":"rgba"}}],[11,"red","","Returns a solid red color value.",1,{"inputs":[],"output":{"name":"rgba"}}],[11,"transparent","","Returns a transparent color value.",1,{"inputs":[],"output":{"name":"rgba"}}],[11,"white","","Returns a solid white color value.",1,{"inputs":[],"output":{"name":"rgba"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"rgba"}}],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,null],[11,"get_format","","",1,null],[11,"convert","","",1,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"from","","",6,{"inputs":[{"name":"combinederror"}],"output":{"name":"error"}}],[11,"from","","",6,{"inputs":[{"name":"pipelinestateerror"}],"output":{"name":"error"}}],[11,"from","","",6,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"error"}}],[11,"from","","",6,{"inputs":[{"name":"creationerror"}],"output":{"name":"error"}}],[11,"from","","",6,{"inputs":[{"name":"programerror"}],"output":{"name":"error"}}],[11,"from","","",6,{"inputs":[{"name":"creationerror"}],"output":{"name":"error"}}],[11,"from","","",6,{"inputs":[{"name":"creationerror"}],"output":{"name":"error"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mesh"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"mesh"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"mesh"}],"output":{"name":"bool"}}],[11,"build","","Builds a new mesh from the given vertices.",46,{"inputs":[{"name":"d"}],"output":{"name":"meshbuilder"}}],[11,"attributes","","Returns a list of all vertex attributes needed by this mesh.",46,null],[11,"geometry","","Returns the mesh's vertex buffer and associated buffer slice.",46,null],[11,"transform","","Returns the transformation matrix of the mesh.",46,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"meshbuilder"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"meshbuilder"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"meshbuilder"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `MeshBuilder` with the given vertices.",47,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"with_prim_type","","Sets the primitive type of the mesh.",47,{"inputs":[{"name":"self"},{"name":"primitive"}],"output":{"name":"self"}}],[11,"with_position","","Sets the position of the mesh in 3D space.",47,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"with_rotation","","Rotates the mesh a certain number of degrees around the given axis.",47,{"inputs":[{"name":"self"},{"name":"ax"},{"name":"an"}],"output":{"name":"self"}}],[11,"with_scale","","Scales the mesh size according to the given value.",47,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"with_transform","","Sets the transformation matrix of the mesh.",47,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[11,"build","","Builds and returns the new mesh.",47,{"inputs":[{"name":"self"},{"name":"factory"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"material"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"material"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"material"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"materialbuilder"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"materialbuilder"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"materialbuilder"}],"output":{"name":"bool"}}],[11,"new","","Creates a new material builder.",48,{"inputs":[],"output":{"name":"self"}}],[11,"with_albedo","","Sets the albedo to an existing texture map.",48,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"materialbuilder"}}],[11,"with_emission","","Sets the emission to an existing texture map.",48,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"materialbuilder"}}],[11,"with_normal","","Sets the normal to an existing texture map.",48,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"materialbuilder"}}],[11,"with_metallic","","Sets the metallic to an existing texture map.",48,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"materialbuilder"}}],[11,"with_roughness","","Sets the roughness to an existing texture map.",48,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"materialbuilder"}}],[11,"with_ambient_occlusion","","Sets the ambient_occlusion to an existing texture map.",48,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"materialbuilder"}}],[11,"with_caveat","","Sets the caveat to an existing texture map.",48,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"materialbuilder"}}],[11,"build","","Builds and returns the new material.",48,{"inputs":[{"name":"self"},{"name":"factory"}],"output":{"name":"result"}}],[11,"new","","Creates a `Renderer` with default window settings.",4,{"inputs":[{"name":"eventsloop"}],"output":{"name":"result"}}],[11,"build","","Creates a new `RendererBuilder`, equivalent to `RendererBuilder::new()`.",4,{"inputs":[{"name":"eventsloop"}],"output":{"name":"rendererbuilder"}}],[11,"create_mesh","","Builds a new mesh from the given vertices.",4,{"inputs":[{"name":"self"},{"name":"meshbuilder"}],"output":{"name":"result"}}],[11,"create_texture","","Builds a new texture resource.",4,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"result"}}],[11,"create_material","","Builds a new material resource.",4,{"inputs":[{"name":"self"},{"name":"materialbuilder"}],"output":{"name":"result"}}],[11,"create_pipe","","Builds a new renderer pipeline.",4,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"result"}}],[11,"draw","","Draws a scene with the given pipeline.",4,null],[11,"window","","Retrieves an immutable borrow of the window.",4,{"inputs":[{"name":"self"}],"output":{"name":"winitwindow"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"texture"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"from_data","","Builds a new texture with the given raw texture data.",49,{"inputs":[{"name":"d"}],"output":{"name":"texturebuilder"}}],[11,"from_color_val","","Builds a new texture with the given raw texture data.",49,{"inputs":[{"name":"c"}],"output":{"name":"texturebuilder"}}],[11,"sampler","","Returns the sampler for the texture.",49,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"view","","Returns the texture's raw shader resource view.",49,{"inputs":[{"name":"self"}],"output":{"name":"rawshaderresourceview"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"texturebuilder"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"texturebuilder"}],"output":{"name":"bool"}}],[11,"from_color_val","","Creates a new `TextureBuilder` from the given RGBA color value.",50,{"inputs":[{"name":"c"}],"output":{"name":"self"}}],[11,"new","","Creates a new `TextureBuilder` with the given raw texture data.",50,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"mip_levels","","Sets the number of mipmap levels to generate.",50,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"self"}}],[11,"with_size","","Sets the texture width and height in pixels.",50,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"dynamic","","Sets whether the texture is mutable or not.",50,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_format","","Sets the texture format",50,{"inputs":[{"name":"self"},{"name":"surfacetype"}],"output":{"name":"self"}}],[11,"with_channel_type","","Sets the texture channel type",50,{"inputs":[{"name":"self"},{"name":"channeltype"}],"output":{"name":"self"}}],[11,"build","","Builds and returns the new texture.",50,{"inputs":[{"name":"self"},{"name":"factory"}],"output":{"name":"result"}}],[6,"Result","","Renderer result type.",null,null],[6,"Encoder","","Command buffer encoder type.",null,null],[6,"Factory","","Graphics factory type.",null,null],[8,"PolyPipeline","","",null,null],[10,"apply","","Retuns `ParallelIterator` which apply data to all stages",15,null],[10,"encoders_required","","Returns number of `Encoder`s required",15,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[8,"PolyStage","","",null,null],[10,"apply","","",16,null],[10,"encoders_required","","Get number of encoders needed for this stage.",16,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}]],"paths":[[3,"Camera"],[3,"Rgba"],[3,"Config"],[3,"Material"],[3,"Renderer"],[4,"Projection"],[4,"Error"],[3,"DirectionalLight"],[3,"PointLight"],[3,"SpotLight"],[3,"SunLight"],[4,"Light"],[3,"DrawFlat"],[3,"DrawPbm"],[3,"DrawShaded"],[8,"PolyPipeline"],[8,"PolyStage"],[3,"Effect"],[3,"ColorBuffer"],[3,"DepthBuffer"],[4,"DepthMode"],[8,"PassApply"],[8,"PassData"],[8,"Pass"],[3,"Apply"],[3,"Supplier"],[3,"CompiledPass"],[3,"NewEffect"],[3,"EffectBuilder"],[3,"Stage"],[3,"StageBuilder"],[3,"Pipeline"],[3,"PipelineBuilder"],[3,"Target"],[3,"TargetBuilder"],[8,"PipelineApply"],[8,"PipelineBuild"],[8,"PipelineData"],[3,"PosColor"],[3,"PosTex"],[3,"PosNormTex"],[3,"PosNormTangTex"],[8,"Attribute"],[8,"VertexFormat"],[8,"With"],[3,"Separate"],[3,"Mesh"],[3,"MeshBuilder"],[3,"MaterialBuilder"],[3,"Texture"],[3,"TextureBuilder"]]};
initSearch(searchIndex);
